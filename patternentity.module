<?php

module_load_include('inc', 'patternentity', 'theme/theme');
module_load_include('module', 'votingapi', 'votingapi');

/**
 * Implements hook_entity_info().
 */
function patternentity_entity_info() {
  $return['patternentity'] = array(
    'label' => t('Pattern Entity'),
    'base table' => 'patternentity',
    'entity keys' => array(
      'id' => 'pid',
      'label' => 'title',
    ),
    'entity class' => 'PatternEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'PatternEntityController',
    'admin ui' => array(
      'path' => 'admin/structure/patternentity',
      'controller class' => 'PatternEntityUIController',
      'file' => 'includes/patternentity.admin.inc',
    ),
    'module' => 'patternentity',
    'access callback' => 'patternentity_admin_access',
    'fieldable' => TRUE,
    'bundles' => array(
      'patternentity' => array(
        'label' => t('pattern entity bundle'),
        'admin' => array(
          'path' => 'admin/structure/patternentity',
          'access arguments' => array('administer patternentity'),
        ),
      ),
    ),

    'view modes' => array(
      'full pattern' => array(
        'label' => t('full for pattern'),
        'custom settings' => FALSE,
      ),
      'teaser pattern' => array(
        'label' => t('teaser for pattern'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $return;
}

/**
 * accesss callback function for hook_entity_info().
 */
function patternentity_admin_access($op, $profile = NULL, $account = NULL) {
  return user_access('administer patternentity', $account);
}

/**
 * Implements hook_permission().
 */
function patternentity_permission() {
  return array(
    'administer patternentity' => array(
      'title' => t('Administer patternentity'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function patternentity_menu() {
  $items = array();

  $items['all_pattern_entity_list'] = array(
    'title' => 'all patternentity list ',
    'description' => 'all patternentity list',
    'page callback' => '_pattern_entity_all_list_page',
    'page arguments' => array(),
    'access callback' => TRUE,
  );


  $items['pattern/%'] = array(
    'title' => 'pattern view',
    'description' => 'pattern view page',
    'page callback' => '_pattern_entity_view_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['pattern/%/download'] = array(
    'title' => 'pattern download link',
    'description' => 'pattern download menu link',
    'page callback' => '_pattern_entity_download_pattern',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['pattern/%/voting'] = array(
    'title' => 'pattern voting link',
    'description' => 'pattern voting link', 
    'page callback' => '_pattern_entity_voting_pattern',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['pattern/uploader/%'] = array(
    'title' => 'uploader \'s all pattern',
    'description' => 'all pattern files uploaded by user %',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  $items['pattern/category/%'] = array(
    'title' => 'all pattern in % category',
    'description' => 'all pattern files in % category',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  $items['pattern/author/%'] = array(
    'title' => 'all pattern belong to author %',
    'description' => 'all pattern belong to author %',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  $items['pattern/search/%/%'] = array(
    'title' => 'search patternentity',
    'description' => 'search patternentity with value/category, and so on',
    'page callback' => '_pattern_entity_search',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * callback hook_menu() all_pattern_entity_list 
 */
function _pattern_entity_all_list_page() {
  return _pattern_entity_list('pid', '0', '>');
}

/**
 * callback hook_menu() pattern/pid/download
 */
function _pattern_entity_download_pattern($pid) {
  $ety_obj = entity_object_load($pid, 'patternentity');
  if(!$ety_obj) {
    drupal_set_message("The pattern file doesn't exist.", "error");
    global $base_url;
    drupal_goto($base_url);
  }
  $public_dir_path = variable_get('file_public_path', conf_path() . '/files');
  
  $file_path = $ety_obj->file_path;
  //$file_path = substr_replace($ety_obj->file_path, $public_dir_path, 0, 8);
  //dsm($file_path);
  $file = file_get_contents($file_path);
  if (!$file) {
    return;
  }
  $downloads = $ety_obj->file_downloads + 1;
  db_update('patternentity')
    ->condition('pid', $ety_obj->pid)
    ->fields(array('file_downloads' => $downloads))
    ->execute();
  drupal_add_http_header("Content-type", " text/plain; charset=utf-8");
  drupal_add_http_header("Content-Disposition", "attachment;filename=" . $ety_obj->file_name);
  print $file;
}

/**
 * callback hook_menu() for /pattern/pid
 */
function _pattern_entity_view_page($pid) {
  $pe = entity_object_load($pid, 'patternentity');
  if (!$pe) {
    drupal_set_message("The pattern file doesn't exist.", "error");
    global $base_url;
    drupal_goto($base_url);
  }
  drupal_set_title($pe->title);

  drupal_add_css(drupal_get_path('module', 'patternentity') . '/theme/patternentity.css');

  $content = _pattern_entity_view_pattern_description($pe);
  $content .= '<div id="patternentity-page-pattern-field"><ul>';
  $content .= _pattern_entity_parser_field_pattern($pe->pattern);
  $content .= '</ul></div>';

  $field_view = entity_view('patternentity', array($pid => $pe));
  $content .= drupal_render($field_view);

  return $content;
}

/**
 * callback hook_menu() for list /pattern/$property/$arg
 */
function _pattern_entity_list($property, $arg, $operate = '=') {
  drupal_add_js(drupal_get_path('module', 'patternentity') . '/theme/jquery.autofill.min.js');
  drupal_add_js(drupal_get_path('module', 'patternentity') . '/theme/patternentity.js');
  if ($property == 'uploader') {
    $usr_obj = user_load($arg);
    if(!$usr_obj) {
      drupal_set_message("The pattern list doesn't exist.", "error");
      global $base_url;
      drupal_goto($base_url);
    }
    $arg_deal = $usr_obj->name;
  }
  else {
    $arg_deal = $arg;
  }

  if ($property == 'pid') {
    drupal_set_title('all patternentity:');
    $fieldset_title = 'all patternentity:';
  }
  else {
    drupal_set_title($property . ': '  . $arg_deal);
    $fieldset_title = $property . ': '  . $arg_deal;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'patternentity')
    ->propertyCondition($property, $arg, $operate)
    ->propertyOrderBy('created', 'DESC')
    ->execute();
  //dsm($query);
  if (isset($query->ordered_results) && count($query->ordered_results)) {
    $searchform = drupal_get_form('patternentity_search');
    //dsm($searchform);
    $list = drupal_render($searchform);
    $list .= "<fieldset><legend>$fieldset_title</legend><div class='fieldset-wrapper'>";
    $list .= _pattern_entity_list_page($query);
    $list .= '</div></fieldset>';
    return $list;
  }
  else {
    drupal_set_message("The pattern list doesn't exist.", "error");
    global $base_url;
    drupal_goto($base_url);
  }
}

/**
 * Implement search function form for patternentity.
 */
function patternentity_search($form, &$form_state, $search_type='', $search_value='') {
  $form['patternentity_search']= array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),

  );
  $form['patternentity_search']['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => ($search_value == '')?'':$search_value,
    '#attributes' => array('title' => t('Enter the terms you wish to search for.'), 'class' => array('container-inline')),

  );
  $form['patternentity_search']['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected'),
    '#title_display' => 'invisible',
    '#options' => array(
      0 => t('Title'),
      1 => t('Category'),
      2 => t('Author'),
      3 => t('UUID'),
      4 => t('Pid'),
    ),
    '#default_value' => ($search_type == '')?0:$search_type,
  );

  $form['patternentity_search']['actions'] = array('#type' => 'actions');
  $form['patternentity_search']['actions']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  $form['patternentity_search']['#submit'][] = 'patternentity_search_submit';

  //dsm($form_state);
  return $form;
}

/**
 * search form's submit function.
 */
function patternentity_search_submit($form, &$form_state) {

  if ($form_state['values']['search'] == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }

  $form_id = $form['form_id']['#value'];
  //dsm($form_state);
  $form_state['redirect'] = 'pattern/search/' . trim($form_state['values']['selected']) . '/' . trim($form_state['values']['search']);
  

}

/**
 * callback hook_menu() for /pattern/search/arg1/arg2 path
 */
function _pattern_entity_search($selected, $value) {
  drupal_add_js(drupal_get_path('module', 'patternentity') . '/theme/jquery.autofill.min.js');
  drupal_add_js(drupal_get_path('module', 'patternentity') . '/theme/patternentity.js');

  drupal_set_title('search :');

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'patternentity');
  switch ($selected) {
    case 0:
      $query->propertyCondition('title', '%' . db_like($value) . '%', 'LIKE');
      $fieldset_title = "pattern with title: $value";
      break;
    case 1:
      $query->propertyCondition('category', '%' . db_like($value) . '%', 'LIKE');
      $fieldset_title = "pattern in category: $value";
      break;
    case 2:
      $query->propertyCondition('author', '%' . db_like($value) . '%', 'LIKE');
      $fieldset_title = "pattern of author: $value";
      break;
    case 3:
      $query->propertyCondition('uuuid', '%' . db_like($value) . '%', 'LIKE');
      $fieldset_title = "pattern with uuuid: $value";
      break;
    case 4:
      $query->propertyCondition('pid', $value, '=');
      $fieldset_title = "pattern with pid: $value";
      break;
  }
  $query->propertyOrderBy('created', 'DESC')
    ->execute();
    
  //dsm($query);

  $form = drupal_get_form('patternentity_search', $selected, $value);
  $list = drupal_render($form);
  if (isset($query->ordered_results) && count($query->ordered_results)) {
    $list .= "<fieldset><legend>$fieldset_title</legend><div class='fieldset-wrapper'>";
    $list .= _pattern_entity_list_page($query);
    $list .= '</div></fieldset>';
  }
  else {
    $list .= t('no search result.');
  }
  return $list;
}
