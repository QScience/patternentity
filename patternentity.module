<?php

module_load_include('inc', 'patternentity', 'theme/theme');

/**
 * Implements hook_entity_info().
 */
function patternentity_entity_info() {
  $return['patternentity'] = array(
    'label' => t('Pattern Entity'),
    'base table' => 'patternentity',
    'entity keys' => array(
      'id' => 'pid',
      'label' => 'title',
    ),
    'entity class' => 'PatternEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'PatternEntityController',
    'admin ui' => array(
      'path' => 'admin/structure/patternentity',
      'controller class' => 'PatternEntityUIController',
      'file' => 'includes/patternentity.admin.inc',
    ),
    'module' => 'patternentity',
    'access callback' => 'patternentity_admin_access',
    'fieldable' => TRUE,
    'bundles' => array(
      'patternentity' => array(
        'label' => t('pattern entity bundle'),
        'admin' => array(
          'path' => 'admin/structure/patternentity',
          'access arguments' => array('administer patternentity'),
        ),
      ),
    ),

    'view modes' => array(
      'full pattern' => array(
        'label' => t('full for pattern'),
        'custom settings' => FALSE,
      ),
      'teaser pattern' => array(
        'label' => t('teaser for pattern'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $return;
}

/**
 * accesss callback function for hook_entity_info().
 */
function patternentity_admin_access($op, $profile = NULL, $account = NULL) {
  return user_access('administer patternentity', $account);
}

/**
 * Implements hook_permission().
 */
function patternentity_permission() {
  return array(
    'administer patternentity' => array(
      'title' => t('Administer patternentity'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function patternentity_menu() {
  $items = array();

  $items['pattern/%'] = array(
    'title' => 'pattern view',
    'description' => 'pattern view page',
    'page callback' => '_pattern_entity_view_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['pattern/%/download'] = array(
    'title' => 'pattern download link',
    'description' => 'pattern download menu link',
    'page callback' => '_pattern_entity_download_pattern',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['pattern/uploader/%'] = array(
    'title' => 'uploader \'s all pattern',
    'description' => 'all pattern files uploaded by user %',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  $items['pattern/category/%'] = array(
    'title' => 'all pattern in % category',
    'description' => 'all pattern files in % category',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  $items['pattern/author/%'] = array(
    'title' => 'all pattern belong to author %',
    'description' => 'all pattern belong to author %',
    'page callback' => '_pattern_entity_list',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );


  return $items;
}

/**
 * callback hook_menu() pattern/pid/download
 */
function _pattern_entity_download_pattern($pid) {
  $ety_obj = entity_object_load($pid, 'patternentity');
  $public_dir_path = variable_get('file_public_path', conf_path() . '/files');
  $file_path = substr_replace($ety_obj->file_path, $public_dir_path, 0, 8);
  $file = file_get_contents($file_path);
  if (!$file) {
    return;
  }
  $downloads = $ety_obj->file_downloads + 1;
  db_update('patternentity')
    ->condition('pid', $ety_obj->pid)
    ->fields(array('file_downloads' => $downloads))
    ->execute();
  drupal_add_http_header("Content-type", " text/plain; charset=utf-8");
  drupal_add_http_header("Content-Disposition", "attachment;filename=" . $ety_obj->file_name);
  print $file;
}

/**
 * callback hook_menu() for /pattern/pid
 */
function _pattern_entity_view_page($pid) {
  $pe = entity_object_load($pid, 'patternentity');
  drupal_set_title($pe->title);
  drupal_add_css(drupal_get_path('module', 'patternentity') . '/theme/patternentity.css');

  $content = _pattern_entity_view_pattern_description($pe);
  $content .= '<div id="patternentity-page-pattern-field"><ul>';
  $content .= _pattern_entity_parser_field_pattern($pe->pattern);
  $content .= '</ul></div>';

  $field_view = entity_view('patternentity', array($pid => $pe));
  $content .= drupal_render($field_view);

  return $content;
}

/**
 * callback hook_menu() for list /pattern/$property/$arg
 */
function _pattern_entity_list($property, $arg) {
  drupal_add_js(drupal_get_path('module', 'patternentity') . '/theme/patternentity.js');
  if ($property == 'uploader') {
    $usr_obj = user_load($arg);
    $arg_deal = $usr_obj->name;
  }
  else {
    $arg_deal = $arg;
  }
  drupal_set_title($property . ': '  . $arg_deal);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'patternentity')
    ->propertyCondition($property, $arg)
    ->propertyOrderBy('created', 'DESC')
    ->execute();
  dsm($query);
  $list = _pattern_entity_list_page($query);
  return $list;
}
